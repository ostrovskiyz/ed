// Package messages provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package messages

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Message defines model for Message.
type Message struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at"`
	Id        *int       `json:"id,omitempty"`
	Text      *string    `json:"text,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// MessageInput defines model for MessageInput.
type MessageInput struct {
	Text string `json:"text"`
}

// PatchMessageJSONRequestBody defines body for PatchMessage for application/json ContentType.
type PatchMessageJSONRequestBody = MessageInput

// PostMessageJSONRequestBody defines body for PostMessage for application/json ContentType.
type PostMessageJSONRequestBody = MessageInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a message by ID
	// (DELETE /delete/{id})
	DeleteMessage(ctx echo.Context, id int) error
	// Get all messages
	// (GET /get)
	GetMessages(ctx echo.Context) error
	// Update a message by ID
	// (PATCH /patch/{id})
	PatchMessage(ctx echo.Context, id int) error
	// Create a new message
	// (POST /post)
	PostMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteMessage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMessage(ctx, id)
	return err
}

// GetMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMessages(ctx)
	return err
}

// PatchMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchMessage(ctx, id)
	return err
}

// PostMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostMessage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/delete/:id", wrapper.DeleteMessage)
	router.GET(baseURL+"/get", wrapper.GetMessages)
	router.PATCH(baseURL+"/patch/:id", wrapper.PatchMessage)
	router.POST(baseURL+"/post", wrapper.PostMessage)

}
